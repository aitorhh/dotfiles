let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

" Config for vim-notes
""""""""""""""""""""""
let g:notes_directories = ['~/Documents/notes', '~/Dropbox/notes']


" Config for syntastic
""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_python_checkers = ['pylint']

"Configuration for python-mode
"""""""""""""""""""""""""""""""""""""""""""""""""""""":
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 1

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 0
let g:pymode_lint_checker = "pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" Disable colorcolum
let g:pymode_options_colorcolumn = 0

" udpate toc automatically
let g:vmt_auto_update_on_save = 1

"set <F12> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F12>

" highlight all search pattern matches
set hlsearch

" Save as sudo with \W
noremap <Leader>W :w !sudo tee % > /dev/null

" make test commands execute using dispatch.vim
let test#strategy = "vimux"
let test#python#runner = 'pytest'
let test#python#nose#options = "--verbose -a '!integration'"

" Save as :W
command W :w

" Configuration forr nerdtree
""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F2> :NERDTreeToggle<CR>

" Solarized configuration
set term=screen-256color
set background=dark
colorscheme solarized
call togglebg#map("<F5>")

" File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('scala', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('conf', 'Red', 'none', 'red', '#151515')

call NERDTreeHighlightFile('py', 'yellow', 'none', 'yellow', '#151515')

call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')

call NERDTreeHighlightFile('less', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('html', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ts', 'green', 'none', 'green', '#151515')


" Configuratino for ymc
""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_collect_identifiers_from_tags_files = 1

" Configuratino for javacomplete2
""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType java setlocal omnifunc=javacomplete#Complete

nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
nmap <F5> <Plug>(JavaComplete-Imports-Add)
nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)

" Configuratino for scala
""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:scala_scaladoc_indent = 2

" https://github.com/pjrt/stags
function! QualifiedTagJump() abort
  let l:plain_tag = expand("<cword>")
  let l:orig_keyword = &iskeyword
  set iskeyword+=\.
  let l:word = expand("<cword>")
  let &iskeyword = l:orig_keyword

  let l:splitted = split(l:word, '\.')
  let l:acc = []
  for wo in l:splitted
    let l:acc = add(l:acc, wo)
    if wo ==# l:plain_tag
      break
    endif
  endfor

  let l:combined = join(l:acc, ".")
  try
    execute "ta " . l:combined
  catch /.*E426.*/ " Tag not found
    execute "ta " . l:plain_tag
  endtry
endfunction

nnoremap <silent> <C-]> :<C-u>call QualifiedTagJump()<CR>

" Configuration for autotags
""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:autotagTagsFile="tags"
